using StaticArrays
using BenchmarkTools: @btime

include("fastpolys.jl")
using FastPolys

const PA2= @SMatrix [0 1 1 1 1 1 1 0 0 0 ; 0 0 1 1 1 0 0 1 1 0 ; 0 0 0 1 0 1 0 1 0 1 ; 0 0 0 0 0 0 1 0 1 1 ; 0 0 0 0 0 1 1 1 1 0 ; 0 0 0 0 0 0 1 1 0 1 ; 0 0 0 0 0 0 0 0 1 1 ; 0 0 0 0 0 0 0 0 1 1 ; 0 0 0 0 0 0 0 0 0 1 ; 0 0 0 0 0 0 0 0 0 0 ]

const P4_1 = (1,1,1,2,1,1,1,2,2,3,4,3,4,2,3,4,5,5,6,7,)
const P4_2 = (2,2,3,3,5,5,6,5,5,6,7,6,7,8,8,9,6,8,8,9,)
const P4_3 = (4,3,4,4,7,6,7,9,8,10,10,8,9,9,10,10,7,9,10,10,)
const P4 = Val((P4_1, P4_2, P4_3))

const P6_1 = (1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,2,2,3,4,3,4,2,2,3,4,3,4,2,2,3,4,3,4,1,1,1,2,2,3,3,2,2,1,1,1,4,3,2,4,3,4,3,2,2,1,1,1,)
const P6_2 = (2,2,2,2,3,3,2,2,3,3,3,3,5,5,5,5,6,6,5,5,6,7,6,7,5,5,6,6,5,5,7,6,7,6,5,5,4,3,2,4,3,4,4,3,4,2,3,4,5,5,5,5,5,6,7,6,7,5,6,7,)
const P6_3 = (3,4,3,4,4,4,3,4,4,4,4,4,6,7,6,7,7,7,8,9,8,8,9,8,7,6,7,7,6,7,8,8,8,9,8,9,5,5,6,5,5,6,7,6,7,8,8,9,6,6,6,8,8,8,9,8,9,8,8,9,)
const P6_4 = (10,10,9,8,9,8,7,6,5,7,6,5,10,10,9,8,9,8,10,10,9,9,10,10,8,9,8,9,10,10,9,9,10,10,10,10,6,7,7,8,9,8,9,10,10,9,10,10,7,7,7,9,9,10,10,10,10,9,10,10,)
const P6 = Val((P6_1, P6_2, P6_3, P6_4))

const P8_1 = (1,1,1,1,1,1,1,1,1,2,2,3,4,3,4,2,3,4,1,1,1,2,2,2,2,3,3,1,1,1,)
const P8_2 = (2,2,2,2,2,2,5,5,5,5,5,5,5,6,6,5,6,7,3,4,2,3,4,3,4,4,4,2,3,4,)
const P8_3 = (3,3,3,3,3,3,6,6,6,6,7,6,7,7,7,8,8,8,5,5,5,5,5,6,7,6,7,5,6,7,)
const P8_4 = (4,4,4,4,4,4,7,7,7,8,8,8,9,8,9,9,9,9,6,6,6,8,8,8,9,8,9,8,8,9,)
const P8_5 = (8,9,10,6,7,5,8,9,10,9,9,10,10,10,10,10,10,10,7,7,7,9,9,10,10,10,10,9,10,10,)
const P8 = Val((P8_1, P8_2, P8_3, P8_4, P8_5))

const SUM10 = Val(((1,2,3,4,5,6,7,8,9,10),))

function invariants(x1::SVector{10, T}) where {T}
    x2 = x1.*x1
    x3 = x2.*x1
    x4 = x3.*x1
    x5 = x4.*x1
    x6 = x5.*x1

    P1 = fpoly((x1,), Main.SUM10)
    P2 = dot(x1, PA2 * x1)
    P3 = fpoly((x2,), Main.SUM10)
    P4 = fpoly((x1, x1, x1), Main.P4)
    P5 = fpoly((x3,), Main.SUM10)
    P6 = fpoly((x1, x1, x1, x1), Main.P6)
    P7 = fpoly((x4,), Main.SUM10)
    P8 = fpoly((x1, x1, x1, x1, x1), Main.P8)
    P9 = fpoly((x5,), Main.SUM10)
    P10 = fpoly((x6,), Main.SUM10)
    return SVector(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10)
end

function invariants_d(x1::SVector{10, T}) where {T}
    x2 = x1.*x1
    x3 = x2.*x1
    x4 = x3.*x1
    x5 = x4.*x1
    dx1 = @SVector ones(10)
    dx2 = 2 * x1
    dx3 = 3 * x2
    dx4 = 4 * x3
    dx5 = 5 * x4
    dx6 = 6 * x5

    dP1 = dx1
    dP2 = 2 * PA2 * x1
    dP3 = dx2
    dP4 = fpoly_d((x1, x1, x1),(dx1,dx1,dx1), Main.P4)
    dP5 = dx3
    dP6 = fpoly_d((x1, x1, x1, x1), (dx1, dx1, dx1, dx1), Main.P6)
    dP7 = dx4
    dP8 = fpoly_d((x1, x1, x1, x1, x1), (dx1, dx1, dx1, dx1, dx1), Main.P8)
    dP9 = dx5
    dP10 = dx6
    return (dP1, dP2, dP3, dP4, dP5, dP6, dP7, dP8, dP9, dP10)
end


x = @SVector rand(10)
@btime invariants($x)
@btime invariants_d($x)
